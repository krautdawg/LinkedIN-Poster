
import OpenAI from "openai";
import type { SelectPost } from "@db/schema";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

type GeneratedPost = {
  content: string;
  sourceUrl: string;
  sentiment: {
    rating: number;
    confidence: number;
  };
};

export async function generateLinkedInPosts(topic?: string): Promise<GeneratedPost[]> {
  const systemPrompt = `You are a LinkedIn content expert specializing in AI trends in German-speaking regions.
Follow these rules strictly:
1. Only content from the past 7 days
2. Return exactly 3 posts in German
3. Each post must reference a real article from German tech news sites
4. Include relevant hashtags
5. Format response as JSON with this exact structure:
{
  "posts": [
    {
      "content": "post text in German",
      "sourceUrl": "URL to German article",
      "sentiment": {
        "rating": number from 1-5,
        "confidence": number from 0-1
      }
    }
  ]
}`;

  const userPrompt = `Generate 3 engaging LinkedIn posts about AI trends in German-speaking regions.
${topic ? `Focus on this specific topic: ${topic}\n` : ''}
Each post must:
1. Be written in professional German
2. Reference a specific German tech news article
3. Include 2-3 relevant hashtags
4. Be between 200-400 characters`;

  try {
    console.log("Generating posts with prompt:", userPrompt);

    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
    });

    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("No content received from OpenAI");
    }

    console.log("Raw OpenAI response:", content);

    const result = JSON.parse(content);
    if (!Array.isArray(result.posts) || result.posts.length === 0) {
      throw new Error("Invalid response format: Expected non-empty posts array");
    }

    // Validate each post
    result.posts.forEach((post: GeneratedPost, index: number) => {
      if (!post.content || !post.sourceUrl || !post.sentiment) {
        throw new Error(`Invalid post at index ${index}: Missing required fields`);
      }
      if (typeof post.sentiment.rating !== 'number' || typeof post.sentiment.confidence !== 'number') {
        throw new Error(`Invalid sentiment values for post at index ${index}`);
      }
    });

    return result.posts;
  } catch (error) {
    console.error("OpenAI API error:", error);
    throw new Error("Failed to generate posts: " + (error as Error).message);
  }
}

export async function analyzeSentiment(post: SelectPost): Promise<{
  rating: number;
  confidence: number;
}> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "Analyze the sentiment of this LinkedIn post and provide a rating from 1-5 stars and a confidence score between 0-1. Format response as JSON: { \"rating\": number, \"confidence\": number }"
        },
        {
          role: "user",
          content: post.content,
        },
      ],
      response_format: { type: "json_object" },
      temperature: 0.3,
    });

    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("No content received from OpenAI");
    }

    console.log("OpenAI sentiment response:", content);
    const result = JSON.parse(content);

    if (typeof result.rating !== 'number' || typeof result.confidence !== 'number') {
      throw new Error("Invalid sentiment response format");
    }

    return {
      rating: Math.max(1, Math.min(5, Math.round(result.rating))),
      confidence: Math.max(0, Math.min(1, result.confidence)),
    };
  } catch (error) {
    console.error("OpenAI API error:", error);
    throw new Error("Failed to analyze sentiment: " + (error as Error).message);
  }
}